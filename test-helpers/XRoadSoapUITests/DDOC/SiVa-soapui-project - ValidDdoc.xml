<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="113a4b9e-bfa1-4951-af3a-b782b57c256a" activeEnvironment="Default" name="SiVa" resourceRoot="" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" id="7ca31aaf-f6a0-4fd3-9b7a-cd57e00dd823" wsaVersion="NONE" name="ValidationWebServiceSoapBinding" type="wsdl" bindingName="{http://soap.webapp.siva.openeid.ee/}ValidationWebServiceSoapBinding" soapVersion="1_1" anonymous="optional" definition="http://skload2:6001/soap/validationWebService?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://skload2:6001/soap/validationWebService</con:endpoint></con:endpoints><con:operation id="1ac71c0a-e7f0-484a-857b-744303863cf1" isOneWay="false" action="" name="ValidateDocument" bindingOperationName="ValidateDocument" type="Request-Response" outputName="ValidateDocumentResponse" inputName="ValidateDocument" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="7f842a6a-e07a-4bf8-99c2-2d053a5c2a88" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://skload2:6001/soap/validationWebService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:soap="http://soap.webapp.siva.openeid.ee/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <soap:ValidateDocument>\r
         <soap:ValidationRequest>\r
            <Document>?</Document>\r
            <Filename>?</Filename>\r
            <DocumentType>?</DocumentType>\r
            <!--Optional:-->\r
            <SignaturePolicy>?</SignaturePolicy>\r
         </soap:ValidationRequest>\r
      </soap:ValidateDocument>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://soap.webapp.siva.openeid.ee/ValidationWebService/ValidateDocument"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" id="1106a989-65df-4d7b-9f23-f93d37f4771d" wsaVersion="NONE" name="SignatureValidationServiceSoapBinding" type="wsdl" bindingName="{http://soap.webapp.siva.openeid.ee/}SignatureValidationServiceSoapBinding" soapVersion="1_1" anonymous="optional" definition="http://skload2:6001/soap/validationWebService?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://skload2:6001/soap/validationWebService?wsdl"><con:part><con:url>http://skload2:6001/soap/validationWebService?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="SignatureValidationService" targetNamespace="http://soap.webapp.siva.openeid.ee/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xrd="http://x-road.eu/xsd/xroad.xsd" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="http://soap.webapp.siva.openeid.ee/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/">
  <wsdl:types>
    <xs:schema targetNamespace="http://soap.webapp.siva.openeid.ee/">
      <xs:import namespace="http://x-road.eu/xsd/xroad.xsd" schemaLocation="http://x-road.eu/xsd/xroad.xsd"/>
      <xs:element name="ValidateDocument" type="tns:validateDocument"/>
      <xs:element name="ValidateDocumentResponse" type="tns:ValidateDocumentResponse"/>
      <xs:element name="ValidationReport" type="tns:qualifiedReport"/>
      <xs:element name="ValidationRequest" type="tns:soapValidationRequest"/>
      <xs:complexType name="validateDocument">
        <xs:sequence>
          <xs:element ref="tns:ValidationRequest"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="soapValidationRequest">
        <xs:sequence>
          <xs:element name="Document" type="xs:string"/>
          <xs:element name="Filename" type="xs:string"/>
          <xs:element name="DocumentType" type="tns:documentType"/>
          <xs:element minOccurs="0" name="SignaturePolicy" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ValidateDocumentResponse">
        <xs:sequence>
          <xs:element minOccurs="0" ref="tns:ValidationReport"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="qualifiedReport">
        <xs:sequence>
          <xs:element name="Policy" type="tns:policy"/>
          <xs:element name="ValidationTime" type="xs:string"/>
          <xs:element name="DocumentName" type="xs:string"/>
          <xs:element name="SignatureForm" type="xs:string"/>
          <xs:element name="Signatures">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="Signature" type="tns:signatureValidationData"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="ValidSignaturesCount" type="xs:int"/>
          <xs:element name="SignaturesCount" type="xs:int"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="policy">
        <xs:sequence>
          <xs:element name="PolicyDescription" type="xs:string"/>
          <xs:element name="PolicyName" type="xs:string"/>
          <xs:element name="PolicyUrl" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="signatureValidationData">
        <xs:sequence>
          <xs:element name="Id" type="xs:string"/>
          <xs:element name="SignatureFormat" type="xs:string"/>
          <xs:element name="SignatureLevel" type="xs:string"/>
          <xs:element name="SignedBy" type="xs:string"/>
          <xs:element name="Indication" type="tns:indication"/>
          <xs:element name="SubIndication" type="xs:string"/>
          <xs:element name="Errors">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="Error" type="tns:error"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="SignatureScopes">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" name="SignatureScope" type="tns:signatureScope"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="ClaimedSigningTime" type="xs:string"/>
          <xs:element name="Warnings">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="Warning" type="tns:warning"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="Info" type="tns:info"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="error">
        <xs:sequence>
          <xs:element name="Content" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="signatureScope">
        <xs:sequence>
          <xs:element name="Name" type="xs:string"/>
          <xs:element name="Scope" type="xs:string"/>
          <xs:element name="Content" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="warning">
        <xs:sequence>
          <xs:element name="Description" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="info">
        <xs:sequence>
          <xs:element minOccurs="0" name="bestSignatureTime" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="documentType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="PDF"/>
          <xs:enumeration value="XROAD"/>
          <xs:enumeration value="BDOC"/>
          <xs:enumeration value="DDOC"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="indication">
        <xs:restriction base="xs:string">
          <xs:enumeration value="TOTAL-PASSED"/>
          <xs:enumeration value="TOTAL-FAILED"/>
          <xs:enumeration value="INDETERMINATE"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="ValidateDocument">
    <wsdl:part element="tns:ValidateDocument" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="requestHeader">
    <wsdl:part element="xrd:client" name="client"></wsdl:part>
    <wsdl:part element="xrd:service" name="service"></wsdl:part>
    <wsdl:part element="xrd:id" name="id"></wsdl:part>
    <wsdl:part element="xrd:userId" name="userId"></wsdl:part>
    <wsdl:part element="xrd:issue" name="issue"></wsdl:part>
    <wsdl:part element="xrd:protocolVersion" name="protocolVersion"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ValidateDocumentResponse">
    <wsdl:part element="tns:ValidateDocumentResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="ValidationWebService">
    <wsdl:operation name="ValidateDocument">
      <wsdl:input message="tns:ValidateDocument" name="ValidateDocument"></wsdl:input>
      <wsdl:output message="tns:ValidateDocumentResponse" name="ValidateDocumentResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="SignatureValidationServiceSoapBinding" type="tns:ValidationWebService">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="ValidateDocument">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="ValidateDocument">
        <soap:body use="literal"/>
        <soap:header message="tns:requestHeader" part="client" use="literal"></soap:header>
        <soap:header message="tns:requestHeader" part="service" use="literal"></soap:header>
        <soap:header message="tns:requestHeader" part="id" use="literal"></soap:header>
        <soap:header message="tns:requestHeader" part="userId" use="literal"></soap:header>
        <soap:header message="tns:requestHeader" part="issue" use="literal"></soap:header>
        <soap:header message="tns:requestHeader" part="protocolVersion" use="literal"></soap:header>
      </wsdl:input>
      <wsdl:output name="ValidateDocumentResponse">
        <soap:body use="literal"/>
        <soap:header message="tns:requestHeader" part="client" use="literal"></soap:header>
        <soap:header message="tns:requestHeader" part="service" use="literal"></soap:header>
        <soap:header message="tns:requestHeader" part="id" use="literal"></soap:header>
        <soap:header message="tns:requestHeader" part="userId" use="literal"></soap:header>
        <soap:header message="tns:requestHeader" part="issue" use="literal"></soap:header>
        <soap:header message="tns:requestHeader" part="protocolVersion" use="literal"></soap:header>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="ValidationWebServiceSoapBinding" type="tns:ValidationWebService">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="ValidateDocument">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="ValidateDocument">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="ValidateDocumentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="SignatureValidationService">
    <wsdl:port binding="tns:SignatureValidationServiceSoapBinding" name="ValidationWebServiceImplPort">
      <soap:address location="http://localhost:8080/soap/validationWebService"/>
    </wsdl:port>
  </wsdl:service>
  <wsdl:service name="ValidationWebServiceService">
    <wsdl:port binding="tns:ValidationWebServiceSoapBinding" name="ValidationWebServicePort">
      <soap:address location="http://skload2:6001/soap/validationWebService"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>http://x-road.eu/xsd/xroad.xsd</con:url><con:content><![CDATA[<xs:schema elementFormDefault="qualified" targetNamespace="http://x-road.eu/xsd/xroad.xsd" xmlns="http://x-road.eu/xsd/xroad.xsd" xmlns:id="http://x-road.eu/xsd/identifiers" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="http://www.w3.org/2009/01/xml.xsd"/>
  <xs:import id="id" namespace="http://x-road.eu/xsd/identifiers" schemaLocation="http://x-road.eu/xsd/identifiers.xsd"/>
  <!--Header elements-->
  <xs:element name="client" type="id:XRoadClientIdentifierType">
    <xs:annotation>
      <xs:documentation>Identies service client</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="service" type="id:XRoadServiceIdentifierType">
    <xs:annotation>
      <xs:documentation>Identies the service
                that is invoked by the request</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="centralService" type="id:XRoadCentralServiceIdentifierType">
    <xs:annotation>
      <xs:documentation>Identies the central service
                that is invoked by the request.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="id" type="xs:string">
    <xs:annotation>
      <xs:documentation>Unique identier
                for this message</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="userId" type="xs:string">
    <xs:annotation>
      <xs:documentation>User whose action initiated
                the request</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="requestHash">
    <xs:annotation>
      <xs:documentation>Base64 encoded hash of
                the SOAP request message</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:string">
          <xs:attribute name="algorithmId" type="xs:string">
            <xs:annotation>
              <xs:documentation>Identies hash algorithm
                                that was used to calculate the value
                                of the requestHash field.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="issue" type="xs:string">
    <xs:annotation>
      <xs:documentation>Identies received application, issue or document
                that was the cause of the service request.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="protocolVersion" type="xs:string">
    <xs:annotation>
      <xs:documentation>X-Road message protocol version</xs:documentation>
    </xs:annotation>
  </xs:element>
  <!--Elements describing other elements and operations-->
  <xs:element name="version" type="xs:string">
    <xs:annotation>
      <xs:documentation>Version of the service</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="title">
    <xs:annotation>
      <xs:documentation>Title of the service</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:string">
          <xs:attribute default="en" ref="xml:lang"/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="notes">
    <xs:annotation>
      <xs:documentation>Notes for user</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:string">
          <xs:attribute ref="xml:lang" default="en"/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="techNotes">
    <xs:annotation>
      <xs:documentation>Notes for technical stuff</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:string">
          <xs:attribute ref="xml:lang" default="en"/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://www.w3.org/2009/01/xml.xsd</con:url><con:content><![CDATA[<?xml-stylesheet href="../../2008/09/xsd.xsl" type="text/xsl"?>
<xs:schema targetNamespace="http://www.w3.org/XML/1998/namespace" xml:lang="en" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/1999/xhtml">
  <xs:annotation>
    <xs:documentation>
      <div>
        <h1>About the XML namespace</h1>
        <div class="bodytext">
          <p>This schema document describes the XML namespace, in a form
      suitable for import by other schema documents.</p>
          <p>
            See
            <a href="http://www.w3.org/XML/1998/namespace.html">http://www.w3.org/XML/1998/namespace.html</a>
            and
            <a href="http://www.w3.org/TR/REC-xml">http://www.w3.org/TR/REC-xml</a>
            for information 
      about this namespace.
          </p>
          <p>Note that local names in this namespace are intended to be
      defined only by the World Wide Web Consortium or its subgroups.
      The names currently defined in this namespace are listed below.
      They should not be used with conflicting semantics by any Working
      Group, specification, or document instance.</p>
          <p>
            See further below in this document for more information about
            <a href="#usage">how to refer to this schema document from your own
      XSD schema documents</a>
            and about
            <a href="#nsversioning">the
      namespace-versioning policy governing this schema document</a>
            .
          </p>
        </div>
      </div>
    </xs:documentation>
  </xs:annotation>
  <xs:attribute name="lang">
    <xs:annotation>
      <xs:documentation>
        <div>
          <h3>lang (as an attribute name)</h3>
          <p>denotes an attribute whose value
       is a language code for the natural language of the content of
       any element; its value is inherited.  This name is reserved
       by virtue of its definition in the XML specification.</p>
        </div>
        <div>
          <h4>Notes</h4>
          <p>Attempting to install the relevant ISO 2- and 3-letter
      codes as the enumerated possible values is probably never
      going to be a realistic possibility.</p>
          <p>
            See BCP 47 at
            <a href="http://www.rfc-editor.org/rfc/bcp/bcp47.txt">http://www.rfc-editor.org/rfc/bcp/bcp47.txt</a>
            and the IANA language subtag registry at
            <a href="http://www.iana.org/assignments/language-subtag-registry">http://www.iana.org/assignments/language-subtag-registry</a>
            for further information.
          </p>
          <p>The union allows for the 'un-declaration' of xml:lang with
      the empty string.</p>
        </div>
      </xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:union memberTypes="xs:language">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value=""/>
          </xs:restriction>
        </xs:simpleType>
      </xs:union>
    </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="space">
    <xs:annotation>
      <xs:documentation>
        <div>
          <h3>space (as an attribute name)</h3>
          <p>denotes an attribute whose
       value is a keyword indicating what whitespace processing
       discipline is intended for the content of the element; its
       value is inherited.  This name is reserved by virtue of its
       definition in the XML specification.</p>
        </div>
      </xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:restriction base="xs:NCName">
        <xs:enumeration value="default"/>
        <xs:enumeration value="preserve"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:attribute>
  <xs:attribute name="base" type="xs:anyURI">
    <xs:annotation>
      <xs:documentation>
        <div>
          <h3>base (as an attribute name)</h3>
          <p>denotes an attribute whose value
       provides a URI to be used as the base for interpreting any
       relative URIs in the scope of the element on which it
       appears; its value is inherited.  This name is reserved
       by virtue of its definition in the XML Base specification.</p>
          <p>
            See
            <a href="http://www.w3.org/TR/xmlbase/">http://www.w3.org/TR/xmlbase/</a>
            for information about this attribute.
          </p>
        </div>
      </xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attribute name="id" type="xs:ID">
    <xs:annotation>
      <xs:documentation>
        <div>
          <h3>id (as an attribute name)</h3>
          <p>denotes an attribute whose value
       should be interpreted as if declared to be of type ID.
       This name is reserved by virtue of its definition in the
       xml:id specification.</p>
          <p>
            See
            <a href="http://www.w3.org/TR/xml-id/">http://www.w3.org/TR/xml-id/</a>
            for information about this attribute.
          </p>
        </div>
      </xs:documentation>
    </xs:annotation>
  </xs:attribute>
  <xs:attributeGroup name="specialAttrs">
    <xs:attribute ref="xml:base"/>
    <xs:attribute ref="xml:lang"/>
    <xs:attribute ref="xml:space"/>
    <xs:attribute ref="xml:id"/>
  </xs:attributeGroup>
  <xs:annotation>
    <xs:documentation>
      <div>
        <h3>Father (in any context at all)</h3>
        <div class="bodytext">
          <p>denotes Jon Bosak, the chair of 
      the original XML Working Group.  This name is reserved by 
      the following decision of the W3C XML Plenary and 
      XML Coordination groups:</p>
          <blockquote>
            <p>In appreciation for his vision, leadership and
	dedication the W3C XML Plenary on this 10th day of
	February, 2000, reserves for Jon Bosak in perpetuity
	the XML name "xml:Father".</p>
          </blockquote>
        </div>
      </div>
    </xs:documentation>
  </xs:annotation>
  <xs:annotation>
    <xs:documentation>
      <div xml:id="usage" id="usage">
        <h2>
          <a name="usage">About this schema document</a>
        </h2>
        <div class="bodytext">
          <p>
            This schema defines attributes and an attribute group suitable
      for use by schemas wishing to allow
            <code>xml:base</code>
            ,
            <code>xml:lang</code>
            ,
            <code>xml:space</code>
            or
            <code>xml:id</code>
            attributes on elements they define.
          </p>
          <p>To enable this, such a schema must import this schema for
      the XML namespace, e.g. as follows:</p>
          <pre>&lt;schema . . .>
           . . .
           &lt;import namespace="http://www.w3.org/XML/1998/namespace"
                      schemaLocation="http://www.w3.org/2001/xml.xsd"/></pre>
          <p>or</p>
          <pre>&lt;import namespace="http://www.w3.org/XML/1998/namespace"
                      schemaLocation="http://www.w3.org/2009/01/xml.xsd"/></pre>
          <p>Subsequently, qualified reference to any of the attributes or the
      group defined below will have the desired effect, e.g.</p>
          <pre>&lt;type . . .>
           . . .
           &lt;attributeGroup ref="xml:specialAttrs"/></pre>
          <p>will define a type which will schema-validate an instance element
      with any of those attributes.</p>
        </div>
      </div>
    </xs:documentation>
  </xs:annotation>
  <xs:annotation>
    <xs:documentation>
      <div id="nsversioning" xml:id="nsversioning">
        <h2>
          <a name="nsversioning">Versioning policy for this schema document</a>
        </h2>
        <div class="bodytext">
          <p>
            In keeping with the XML Schema WG's standard versioning
      policy, this schema document will persist at
            <a href="http://www.w3.org/2009/01/xml.xsd">http://www.w3.org/2009/01/xml.xsd</a>
            .
          </p>
          <p>
            At the date of issue it can also be found at
            <a href="http://www.w3.org/2001/xml.xsd">http://www.w3.org/2001/xml.xsd</a>
            .
          </p>
          <p>
            The schema document at that URI may however change in the future,
      in order to remain compatible with the latest version of XML
      Schema itself, or with the XML namespace itself.  In other words,
      if the XML Schema or XML namespaces change, the version of this
      document at
            <a href="http://www.w3.org/2001/xml.xsd">http://www.w3.org/2001/xml.xsd</a>
            will change accordingly; the version at
            <a href="http://www.w3.org/2009/01/xml.xsd">http://www.w3.org/2009/01/xml.xsd</a>
            will not change.
          </p>
          <p>Previous dated (and unchanging) versions of this schema 
      document are at:</p>
          <ul>
            <li>
              <a href="http://www.w3.org/2009/01/xml.xsd">http://www.w3.org/2009/01/xml.xsd</a>
            </li>
            <li>
              <a href="http://www.w3.org/2007/08/xml.xsd">http://www.w3.org/2007/08/xml.xsd</a>
            </li>
            <li>
              <a href="http://www.w3.org/2004/10/xml.xsd">http://www.w3.org/2004/10/xml.xsd</a>
            </li>
            <li>
              <a href="http://www.w3.org/2001/03/xml.xsd">http://www.w3.org/2001/03/xml.xsd</a>
            </li>
          </ul>
        </div>
      </div>
    </xs:documentation>
  </xs:annotation>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>http://x-road.eu/xsd/identifiers.xsd</con:url><con:content><![CDATA[<xs:schema elementFormDefault="qualified" targetNamespace="http://x-road.eu/xsd/identifiers" xmlns="http://x-road.eu/xsd/identifiers" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:complexType name="XRoadIdentifierType">
    <xs:annotation>
      <xs:documentation>Globally unique identifier in the X-Road system.
                Identifier consists of object type specifier and list of
                hierarchical codes (starting with code that identifiers
                the X-Road instance).</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element minOccurs="0" ref="xRoadInstance"/>
      <xs:element minOccurs="0" ref="memberClass"/>
      <xs:element minOccurs="0" ref="memberCode"/>
      <xs:element minOccurs="0" ref="subsystemCode"/>
      <xs:element minOccurs="0" ref="groupCode"/>
      <xs:element minOccurs="0" ref="serviceCode"/>
      <xs:element minOccurs="0" ref="serviceVersion"/>
      <xs:element minOccurs="0" ref="securityCategoryCode"/>
      <xs:element minOccurs="0" ref="serverCode"/>
    </xs:sequence>
    <xs:attribute ref="objectType" use="required"/>
  </xs:complexType>
  <xs:simpleType name="XRoadObjectType">
    <xs:annotation>
      <xs:documentation>Enumeration for X-Road identifier
                types.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="MEMBER"/>
      <xs:enumeration value="SUBSYSTEM"/>
      <xs:enumeration value="SERVER"/>
      <xs:enumeration value="GLOBALGROUP"/>
      <xs:enumeration value="LOCALGROUP"/>
      <xs:enumeration value="SECURITYCATEGORY"/>
      <xs:enumeration value="SERVICE"/>
      <xs:enumeration value="CENTRALSERVICE"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:element name="xRoadInstance" type="xs:string">
    <xs:annotation>
      <xs:documentation>Identifies the X-Road instance. This field is
                applicable to all identifier types.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="memberClass" type="xs:string">
    <xs:annotation>
      <xs:documentation>Type of the member (company, government
                institution, private person, etc.)</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="memberCode" type="xs:string">
    <xs:annotation>
      <xs:documentation>Code that uniquely identifies a member of given
                member type.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="subsystemCode" type="xs:string">
    <xs:annotation>
      <xs:documentation>Code that uniquely identifies a subsystem of
                given X-Road member.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="groupCode" type="xs:string">
    <xs:annotation>
      <xs:documentation>Code that uniquely identifies a global group in
                given X-Road instance.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="serviceCode" type="xs:string">
    <xs:annotation>
      <xs:documentation>Code that uniquely identifies a service offered by
                given X-Road member or subsystem.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="serviceVersion" type="xs:string">
    <xs:annotation>
      <xs:documentation>Version of the service.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="securityCategoryCode" type="xs:string">
    <xs:annotation>
      <xs:documentation>Code that uniquely identifies security category in
                a given X-Road instance.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="serverCode" type="xs:string">
    <xs:annotation>
      <xs:documentation>Code that uniquely identifies security server
                offered by a given X-Road member or
                subsystem.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:attribute name="objectType" type="XRoadObjectType"/>
  <xs:complexType name="XRoadClientIdentifierType">
    <xs:complexContent>
      <xs:restriction base="XRoadIdentifierType">
        <xs:sequence>
          <xs:element ref="xRoadInstance"/>
          <xs:element ref="memberClass"/>
          <xs:element ref="memberCode"/>
          <xs:element minOccurs="0" ref="subsystemCode"/>
        </xs:sequence>
        <xs:attribute ref="objectType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="XRoadServiceIdentifierType">
    <xs:complexContent>
      <xs:restriction base="XRoadIdentifierType">
        <xs:sequence>
          <xs:element ref="xRoadInstance"/>
          <xs:element ref="memberClass"/>
          <xs:element ref="memberCode"/>
          <xs:element minOccurs="0" ref="subsystemCode"/>
          <xs:element ref="serviceCode"/>
          <xs:element minOccurs="0" ref="serviceVersion"/>
        </xs:sequence>
        <xs:attribute ref="objectType" use="required" fixed="SERVICE"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="XRoadSecurityCategoryIdentifierType">
    <xs:complexContent>
      <xs:restriction base="XRoadIdentifierType">
        <xs:sequence>
          <xs:element ref="xRoadInstance"/>
          <xs:element ref="securityCategoryCode"/>
        </xs:sequence>
        <xs:attribute ref="objectType" use="required" fixed="SECURITYCATEGORY"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="XRoadCentralServiceIdentifierType">
    <xs:complexContent>
      <xs:restriction base="XRoadIdentifierType">
        <xs:sequence>
          <xs:element ref="xRoadInstance"/>
          <xs:element ref="serviceCode"/>
        </xs:sequence>
        <xs:attribute ref="objectType" use="required" fixed="CENTRALSERVICE"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="XRoadSecurityServerIdentifierType">
    <xs:complexContent>
      <xs:restriction base="XRoadIdentifierType">
        <xs:sequence>
          <xs:element ref="xRoadInstance"/>
          <xs:element ref="memberClass"/>
          <xs:element ref="memberCode"/>
          <xs:element ref="serverCode"/>
        </xs:sequence>
        <xs:attribute ref="objectType" use="required" fixed="SERVER"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="XRoadGlobalGroupIdentifierType">
    <xs:complexContent>
      <xs:restriction base="XRoadIdentifierType">
        <xs:sequence>
          <xs:element ref="xRoadInstance"/>
          <xs:element ref="groupCode"/>
        </xs:sequence>
        <xs:attribute ref="objectType" use="required" fixed="GLOBALGROUP"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="XRoadLocalGroupIdentifierType">
    <xs:complexContent>
      <xs:restriction base="XRoadIdentifierType">
        <xs:sequence>
          <xs:element ref="groupCode"/>
        </xs:sequence>
        <xs:attribute ref="objectType" use="required" fixed="LOCALGROUP"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${endpoint}</con:endpoint><con:endpoint>http://localhost:8080/soap/validationWebService</con:endpoint></con:endpoints><con:operation id="9c3a5bf7-e705-4383-85ef-d0b1b82463c6" isOneWay="false" action="" name="ValidateDocument" bindingOperationName="ValidateDocument" type="Request-Response" outputName="ValidateDocumentResponse" inputName="ValidateDocument" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="b489f1f6-a8f6-4a27-a4dc-bca73c4cce1a" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/soap/validationWebService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xro="http://x-road.eu/xsd/xroad.xsd" xmlns:iden="http://x-road.eu/xsd/identifiers" xmlns:soap="http://soap.webapp.siva.openeid.ee/">\r
   <soapenv:Header>\r
      <xro:protocolVersion>?</xro:protocolVersion>\r
      <xro:issue>?</xro:issue>\r
      <xro:userId>?</xro:userId>\r
      <xro:id>?</xro:id>\r
      <xro:service iden:objectType="SERVICE">\r
         <iden:xRoadInstance>?</iden:xRoadInstance>\r
         <iden:memberClass>?</iden:memberClass>\r
         <iden:memberCode>?</iden:memberCode>\r
         <!--Optional:-->\r
         <iden:subsystemCode>?</iden:subsystemCode>\r
         <iden:serviceCode>?</iden:serviceCode>\r
         <!--Optional:-->\r
         <iden:serviceVersion>?</iden:serviceVersion>\r
      </xro:service>\r
      <xro:client iden:objectType="?">\r
         <iden:xRoadInstance>?</iden:xRoadInstance>\r
         <iden:memberClass>?</iden:memberClass>\r
         <iden:memberCode>?</iden:memberCode>\r
         <!--Optional:-->\r
         <iden:subsystemCode>?</iden:subsystemCode>\r
      </xro:client>\r
   </soapenv:Header>\r
   <soapenv:Body>\r
      <soap:ValidateDocument>\r
         <soap:ValidationRequest>\r
            <Document>?</Document>\r
            <Filename>?</Filename>\r
            <DocumentType>?</DocumentType>\r
            <!--Optional:-->\r
            <SignaturePolicy>?</SignaturePolicy>\r
         </soap:ValidationRequest>\r
      </soap:ValidateDocument>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://soap.webapp.siva.openeid.ee/ValidationWebService/ValidateDocument"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:testSuite id="8dcd6cc1-8cbc-4f03-83d8-8a15628f56ec" name="XroadValidateDdoc"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="711d2bc5-621b-4782-893b-492fa42c98c2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ValidateValidDdoc" searchProperties="true"><con:description>**TestCaseID: Xroad-Validate-Ddoc-1**

  * TestType: Automated
  * Requirement: [http://open-eid.github.io/SiVa/siva/v2/interfaces/](http://open-eid.github.io/SiVa/siva/v2/interfaces/)
  * Title: Validate valid Ddoc
  * Expected Result: The document should return validation report with one valid signature
  * File: DIGIDOC-XML1.3.ddoc</con:description><con:settings/><con:testStep type="request" name="ValidationRequestDdoc" id="5abf290b-bb69-4758-b655-92269d9692ec"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SignatureValidationServiceSoapBinding</con:interface><con:operation>ValidateDocument</con:operation><con:request name="ValidationRequestDdoc" id="13e8131b-39aa-4931-90b7-d6fe9cf8a188"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xro="http://x-road.eu/xsd/xroad.xsd" xmlns:iden="http://x-road.eu/xsd/identifiers" xmlns:soap="http://soap.webapp.siva.openeid.ee/">
   <soapenv:Header>
      <xro:protocolVersion>${protocolVersion}</xro:protocolVersion>
      <xro:issue>?</xro:issue>
      <xro:userId>${userId}</xro:userId>
      <xro:id>${id}</xro:id>
      <xro:service iden:objectType="SERVICE">
         <iden:xRoadInstance>${xRoadInstance}</iden:xRoadInstance>
         <iden:memberClass>${memberClass}</iden:memberClass>
         <iden:memberCode>${memberCode}</iden:memberCode>
         <iden:subsystemCode>${subsystemCode}</iden:subsystemCode>
         <iden:serviceCode>${serviceCode}</iden:serviceCode>
      </xro:service>
      <xro:client iden:objectType="SUBSYSTEM">
         <iden:xRoadInstance>${xRoadInstance}</iden:xRoadInstance>
         <iden:memberClass>${memberClass}</iden:memberClass>
         <iden:memberCode>${memberCode}</iden:memberCode>
         <iden:subsystemCode>${subsystemCode}</iden:subsystemCode>
      </xro:client>
   </soapenv:Header>
   <soapenv:Body>
      <soap:ValidateDocument>
         <soap:ValidationRequest>
            <Document>${#TestSuite#validDocumentBase64}</Document>
            <Filename>${#TestSuite#validFilename}</Filename>
            <DocumentType>${#TestSuite#documentType}</DocumentType>
             <SignaturePolicy>${#TestSuite#signaturePolicy}</SignaturePolicy>
         </soap:ValidationRequest>
      </soap:ValidateDocument>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="de1839d2-8839-4b02-9bf2-04c6aa24fe46"/><con:assertion type="Schema Compliance" id="a3dddc2d-2ec8-4c75-b89a-b3cb18ed53e8"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" id="7a5d92f2-471a-45f5-bacb-c25529d5e119"/><con:assertion type="XPath Match" id="c89ad5e9-b1a6-47b4-a400-a83a8b7b9dc3" name="XPath Match"><con:configuration><path>//ValidSignaturesCount</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>validDocumentBase64</con:name><con:value></con:value></con:property><con:property><con:name>validFilename</con:name><con:value>DIGIDOC-XML1.3.ddoc</con:value></con:property><con:property><con:name>documentType</con:name><con:value>DDOC</con:value></con:property><con:property><con:name>signaturePolicy</con:name><con:value>POLv2</con:value></con:property><con:property><con:name>invalidDocumentBase64</con:name><con:value></con:value></con:property><con:property><con:name>invalidFilename</con:name><con:value>test-non-repu1.ddoc</con:value></con:property></con:properties></con:testSuite><con:properties><con:property><con:name>endpoint</con:name><con:value>http://xtee6-arendus.webmedia.int</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>